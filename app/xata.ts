// Generated by Xata Codegen 0.25.2. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "AccountAsset",
    columns: [
      { name: "baseNotionalValue", type: "int" },
      { name: "doubleDownCount", type: "int", defaultValue: "0" },
      { name: "doubleDownStrategy", type: "string" },
      { name: "doubleDownThreshold", type: "int" },
      { name: "fibonacciStartingThreshold", type: "int" },
      { name: "doubleDownTargetPercentageLoss", type: "float" },
      { name: "lastDoubleDownTime", type: "datetime" },
      { name: "gradualPurchaseValue", type: "int" },
      { name: "isGradualPurchasingEnabled", type: "bool" },
      { name: "lastInvestmentTime", type: "datetime" },
      { name: "isProfitTakingEnabled", type: "bool" },
      { name: "lastProfitTakingTime", type: "datetime" },
      { name: "doubleDownInterval", type: "string" },
      { name: "profitTakingInterval", type: "string" },
      { name: "gradualPurchaseInterval", type: "string" },
      { name: "doubleDownCountResetInterval", type: "string" },
      { name: "isToppingUpEnabled", type: "bool" },
      { name: "freeFallThreshold", type: "float" },
      { name: "isDoublingDownEnabled", type: "bool" },
      { name: "lastFallingPrice", type: "float" },
      { name: "priceFallCount", type: "int", defaultValue: "0" },
      { name: "fallTrackingInterval", type: "string" },
      { name: "lastFallTrackingTime", type: "datetime" },
      { name: "lastRisingPrice", type: "float" },
      { name: "lastRiseTrackingTime", type: "datetime" },
      { name: "riseTrackingInterval", type: "string" },
      { name: "priceRiseCount", type: "int", defaultValue: "0" },
      { name: "riseTrackingThreshold", type: "float" },
      { name: "baseInvestmentPercentage", type: "float" },
      { name: "doubleUpMaxInvestment", type: "float" },
      { name: "doubleUpCount", type: "int", defaultValue: "0" },
      { name: "isDoublingUpEnabled", type: "bool" },
      { name: "doubleUpThreshold", type: "float" },
      { name: "profitTakingThreshold", type: "float" },
      { name: "status", type: "string" },
      { name: "statusConditions", type: "string" },
      { name: "statusData", type: "string" },
      { name: "statusReason", type: "string" },
      { name: "account", type: "link", link: { table: "Account" } },
      { name: "symbol", type: "string" },
      { name: "isPositionOpen", type: "bool" },
      { name: "fibonacciDoubleDownCount", type: "int", defaultValue: "0" },
      { name: "minimumInvestmentAmount", type: "float" },
      { name: "priceTrackingInterval", type: "string" },
      { name: "lastPrice", type: "float" },
      { name: "lastPriceTrackingTime", type: "datetime" },
      { name: "doubleDownIntervalRules", type: "string" },
      { name: "maxDoubleDownInvestmentPercentage", type: "float" },
      { name: "doDoubleDownOneLevel", type: "bool", defaultValue: "false" },
      { name: "doDoubleDownAllTheWay", type: "bool", defaultValue: "false" },
    ],
  },
  {
    name: "AssetDefaults",
    columns: [
      { name: "doubleDownStrategy", type: "string", defaultValue: "fibonacci" },
      { name: "doubleDownThreshold", type: "float", defaultValue: "0.5" },
      {
        name: "doubleDownTargetPercentageLoss",
        type: "float",
        defaultValue: "1",
      },
      {
        name: "gradualPurchaseValue",
        type: "int",
        notNull: true,
        defaultValue: "1",
      },
      {
        name: "isGradualPurchasingEnabled",
        type: "bool",
        notNull: true,
        defaultValue: "true",
      },
      {
        name: "isProfitTakingEnabled",
        type: "bool",
        notNull: true,
        defaultValue: "false",
      },
      {
        name: "baseNotionalValue",
        type: "int",
        notNull: true,
        defaultValue: "10",
      },
      {
        name: "doubleDownInterval",
        type: "string",
        notNull: true,
        defaultValue: "30 minutes",
      },
      {
        name: "profitTakingInterval",
        type: "string",
        notNull: true,
        defaultValue: "24 hours",
      },
      {
        name: "gradualPurchaseInterval",
        type: "string",
        notNull: true,
        defaultValue: "1 day",
      },
      {
        name: "doubleDownCountResetInterval",
        type: "string",
        notNull: true,
        defaultValue: "1 hour",
      },
      {
        name: "isToppingUpEnabled",
        type: "bool",
        notNull: true,
        defaultValue: "true",
      },
      {
        name: "profitTakingThreshold",
        type: "float",
        notNull: true,
        defaultValue: "0.1",
      },
      {
        name: "freeFallThreshold",
        type: "float",
        notNull: true,
        defaultValue: "1000",
      },
      {
        name: "isDoublingDownEnabled",
        type: "bool",
        notNull: true,
        defaultValue: "true",
      },
      {
        name: "fallTrackingInterval",
        type: "string",
        notNull: true,
        defaultValue: "1 hour",
      },
      {
        name: "riseTrackingInterval",
        type: "string",
        notNull: true,
        defaultValue: "1 hour",
      },
      {
        name: "riseTrackingThreshold",
        type: "float",
        notNull: true,
        defaultValue: "500",
      },
      {
        name: "baseInvestmentPercentage",
        type: "float",
        notNull: true,
        defaultValue: "0.01",
      },
      {
        name: "doubleUpMaxInvestment",
        type: "float",
        notNull: true,
        defaultValue: "500",
      },
      {
        name: "isDoublingUpEnabled",
        type: "bool",
        notNull: true,
        defaultValue: "true",
      },
      {
        name: "doubleUpThreshold",
        type: "float",
        notNull: true,
        defaultValue: "0.5",
      },
      {
        name: "account",
        type: "link",
        link: { table: "Account" },
        unique: true,
      },
      {
        name: "minimumInvestmentAmount",
        type: "float",
        notNull: true,
        defaultValue: "1",
      },
      { name: "isTemplateRecord", type: "bool", defaultValue: "false" },
      { name: "priceTrackingInterval", type: "string", defaultValue: "1 hour" },
      { name: "notes", type: "string" },
      {
        name: "maxDoubleDownInvestmentPercentage",
        type: "float",
        defaultValue: "5",
      },
      { name: "fibonacciStartingThreshold", type: "float" },
      { name: "doubleDownIntervalRules", type: "string" },
    ],
  },
  {
    name: "Feature",
    columns: [
      { name: "name", type: "string", notNull: true, defaultValue: "N/A" },
      { name: "isEnabled", type: "bool", notNull: true, defaultValue: "false" },
    ],
    revLinks: [{ column: "feature", table: "AccountFeature" }],
  },
  {
    name: "Tally",
    columns: [
      { name: "totalInvested", type: "float", defaultValue: "0" },
      { name: "startingCapital", type: "float", defaultValue: "0" },
      { name: "realizedProfit", type: "float", defaultValue: "0" },
      { name: "unrealizedProfit", type: "float", defaultValue: "0" },
      { name: "profitInTheGreen", type: "float", defaultValue: "0" },
      { name: "profitInTheRed", type: "float", defaultValue: "0" },
      { name: "tradingCapital", type: "float", defaultValue: "0" },
      {
        name: "account",
        type: "link",
        link: { table: "Account" },
        unique: true,
      },
      { name: "capitalExcludingProfits", type: "float", defaultValue: "0" },
      { name: "capitalIncludingProfits", type: "float", defaultValue: "0" },
      { name: "equity", type: "float", defaultValue: "0" },
      { name: "cash", type: "float", defaultValue: "0" },
    ],
    revLinks: [{ column: "tally", table: "Account" }],
  },
  {
    name: "Instruction",
    columns: [
      { name: "name", type: "string" },
      { name: "isEnabled", type: "bool", notNull: true, defaultValue: "true" },
      { name: "account", type: "link", link: { table: "Account" } },
    ],
  },
  {
    name: "SellOrder",
    columns: [
      { name: "qty", type: "float", notNull: true, defaultValue: "0" },
      {
        name: "avgUnitBuyPrice",
        type: "float",
        notNull: true,
        defaultValue: "0",
      },
      { name: "soldAt", type: "datetime" },
      { name: "reason", type: "string" },
      { name: "status", type: "string" },
      { name: "platformId", type: "string", unique: true },
      { name: "symbol", type: "string", defaultValue: "_" },
      { name: "unitSellPrice", type: "float" },
      { name: "account", type: "link", link: { table: "Account" } },
    ],
  },
  {
    name: "User",
    columns: [
      { name: "email", type: "string", notNull: true, defaultValue: "" },
      { name: "firstName", type: "string" },
      { name: "lastName", type: "string" },
    ],
    revLinks: [{ column: "user", table: "Account" }],
  },
  {
    name: "Account",
    columns: [
      { name: "user", type: "link", link: { table: "User" } },
      { name: "name", type: "string", notNull: true, defaultValue: "" },
      { name: "maxInitialPositions", type: "int", defaultValue: "5" },
      { name: "totalAdditionalAssetsToBuy", type: "int", defaultValue: "2" },
      {
        name: "additionalAssetBuyInterval",
        type: "string",
        defaultValue: "24 hours",
      },
      { name: "lastAdditionalBuyTime", type: "datetime", defaultValue: "now" },
      { name: "alpacaApiKey", type: "string" },
      { name: "alpacaApiSecret", type: "string" },
      { name: "isPaper", type: "bool" },
      { name: "isEnabled", type: "bool", defaultValue: "false" },
      { name: "shouldAllowTrading", type: "bool", defaultValue: "false" },
      {
        name: "priceTrackingIntervalResetInterval",
        type: "string",
        defaultValue: "3 hours",
      },
      {
        name: "lastPriceTrackingIntervalResetTime",
        type: "datetime",
        defaultValue: "now",
      },
      { name: "percentageCashToAllowBuying", type: "int", defaultValue: "40" },
      { name: "percentageCashToPauseBuying", type: "int", defaultValue: "0" },
      { name: "tally", type: "link", link: { table: "Tally" }, unique: true },
      { name: "enableReservedFundsFeature", type: "bool" },
      { name: "percentageReservedFunds", type: "float" },
      { name: "shouldAllowBuying", type: "bool" },
    ],
    revLinks: [
      { column: "account", table: "AssetDefaults" },
      { column: "account", table: "Tally" },
      { column: "account", table: "Instruction" },
      { column: "account", table: "AccountFeature" },
      { column: "account", table: "SellOrder" },
      { column: "account", table: "AccountAsset" },
    ],
  },
  {
    name: "AccountFeature",
    columns: [
      { name: "isEnabled", type: "bool", notNull: true, defaultValue: "false" },
      { name: "account", type: "link", link: { table: "Account" } },
      { name: "feature", type: "link", link: { table: "Feature" } },
    ],
  },
  {
    name: "Asset",
    columns: [
      { name: "symbol", type: "string" },
      { name: "isEnabled", type: "bool", defaultValue: "true" },
      { name: "level", type: "int", defaultValue: "3" },
      { name: "note", type: "string" },
    ],
  },
  {
    name: "GlobalAccountDefaults",
    columns: [
      { name: "percentageReservedFunds", type: "float", defaultValue: "10" },
      {
        name: "enableReservedFundsFeature",
        type: "bool",
        defaultValue: "true",
      },
      { name: "shouldAllowBuying", type: "bool", defaultValue: "true" },
    ],
  },
  {
    name: "GlobalAssetDefaults",
    columns: [
      { name: "fibonacciStartingThreshold", type: "float", defaultValue: "3" },
      {
        name: "doubleDownIntervalRules",
        type: "string",
        defaultValue:
          '{ "i > -2": "3 hours", "i <= -2 and i > -3": "15 minutes", "i <= -3": "15 minutes" }',
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type AccountAsset = InferredTypes["AccountAsset"];
export type AccountAssetRecord = AccountAsset & XataRecord;

export type AssetDefaults = InferredTypes["AssetDefaults"];
export type AssetDefaultsRecord = AssetDefaults & XataRecord;

export type Feature = InferredTypes["Feature"];
export type FeatureRecord = Feature & XataRecord;

export type Tally = InferredTypes["Tally"];
export type TallyRecord = Tally & XataRecord;

export type Instruction = InferredTypes["Instruction"];
export type InstructionRecord = Instruction & XataRecord;

export type SellOrder = InferredTypes["SellOrder"];
export type SellOrderRecord = SellOrder & XataRecord;

export type User = InferredTypes["User"];
export type UserRecord = User & XataRecord;

export type Account = InferredTypes["Account"];
export type AccountRecord = Account & XataRecord;

export type AccountFeature = InferredTypes["AccountFeature"];
export type AccountFeatureRecord = AccountFeature & XataRecord;

export type Asset = InferredTypes["Asset"];
export type AssetRecord = Asset & XataRecord;

export type GlobalAccountDefaults = InferredTypes["GlobalAccountDefaults"];
export type GlobalAccountDefaultsRecord = GlobalAccountDefaults & XataRecord;

export type GlobalAssetDefaults = InferredTypes["GlobalAssetDefaults"];
export type GlobalAssetDefaultsRecord = GlobalAssetDefaults & XataRecord;

export type DatabaseSchema = {
  AccountAsset: AccountAssetRecord;
  AssetDefaults: AssetDefaultsRecord;
  Feature: FeatureRecord;
  Tally: TallyRecord;
  Instruction: InstructionRecord;
  SellOrder: SellOrderRecord;
  User: UserRecord;
  Account: AccountRecord;
  AccountFeature: AccountFeatureRecord;
  Asset: AssetRecord;
  GlobalAccountDefaults: GlobalAccountDefaultsRecord;
  GlobalAssetDefaults: GlobalAssetDefaultsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Ifeanyi-Isitor-s-workspace-qco40i.eu-west-1.xata.sh/db/trekatrade-bot",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
